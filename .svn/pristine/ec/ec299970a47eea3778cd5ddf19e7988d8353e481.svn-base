package com.epbt2.common.dao;


import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * StdSysParam Value Object.
  * This class is value object representing database table MPLN.STD_SYS_PARAM
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class StdSysParam implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private String paraId;
    private String paraDesc;
    private String paraValue;

    private String schema;

    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public StdSysParam () {

    }

    public StdSysParam (String paraIdIn) {

          this.paraId = paraIdIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public String getParaId() {
          return this.paraId;
    }
    public void setParaId(String paraIdIn) {
          this.paraId = paraIdIn;
    }

    public String getParaDesc() {
          return this.paraDesc;
    }
    public void setParaDesc(String paraDescIn) {
          this.paraDesc = paraDescIn;
    }

    public String getParaValue() {
          return this.paraValue;
    }
    public void setParaValue(String paraValueIn) {
          this.paraValue = paraValueIn;
    }

    public String getSchema() {
        return schema;
    }

    public void setSchema(String schema) {
        this.schema = schema;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(String paraIdIn,
          String paraDescIn,
          String paraValueIn) {
          this.paraId = paraIdIn;
          this.paraDesc = paraDescIn;
          this.paraValue = paraValueIn;
    }


    /** 
     * hasEqualMapping-method will compare two StdSysParam instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(StdSysParam valueObject) {

          if (this.paraId == null) {
                    if (valueObject.getParaId() != null)
                           return(false);
          } else if (!this.paraId.equals(valueObject.getParaId())) {
                    return(false);
          }
          if (this.paraDesc == null) {
                    if (valueObject.getParaDesc() != null)
                           return(false);
          } else if (!this.paraDesc.equals(valueObject.getParaDesc())) {
                    return(false);
          }
          if (this.paraValue == null) {
                    if (valueObject.getParaValue() != null)
                           return(false);
          } else if (!this.paraValue.equals(valueObject.getParaValue())) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass StdSysParam, mapping to table MPLN.STD_SYS_PARAM\n");
        out.append("Persistent attributes: \n"); 
        out.append("paraId = " + this.paraId + "\n"); 
        out.append("paraDesc = " + this.paraDesc + "\n"); 
        out.append("paraValue = " + this.paraValue + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        StdSysParam cloned = new StdSysParam();

        if (this.paraId != null)
             cloned.setParaId(new String(this.paraId)); 
        if (this.paraDesc != null)
             cloned.setParaDesc(new String(this.paraDesc)); 
        if (this.paraValue != null)
             cloned.setParaValue(new String(this.paraValue)); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
